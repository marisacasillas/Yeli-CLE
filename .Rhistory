tchiyr.std +
stthr.tri.a +
hsz.std +
nsk.std +
tchiyr.std:stthr.tri.a +
tchiyr.std:nsk.std +
(1|aclew_child_id),
data=quantity.nonrand.tt,
family="nbinom1")
#summary(tds.tt.nb.v2)
# stthr.tri.amorning            -0.11860    0.17254  -0.687  0.4919
# tchiyr.std:stthr.tri.amorning -0.07229    0.17299  -0.418  0.6760
# no results to save for reporting
# Write model results out for input to shiny
TCDS.models <- bind_rows(
broom.mixed::tidy(tds.rand.zinb) %>%
mutate(model = "TCDS_random_z-inb"),
broom.mixed::tidy(tds.rand.zinb.v2) %>%
mutate(model = "TCDS_random_z-inb.v2"),
# broom.mixed::tidy(tds.rand.gaus) %>%
#   mutate(model = "TCDS_random_log_gaus"),
# broom.mixed::tidy(tds.rand.gaus.v2) %>%
#   mutate(model = "TCDS_random_log_gaus.v2"),
broom.mixed::tidy(tds.tt.nb) %>%
mutate(model = "TCDS_turntaking_nb"),
broom.mixed::tidy(tds.tt.nb.v2) %>%
mutate(model = "TCDS_turntaking_nb.v2")#,
# broom.mixed::tidy(tds.tt.gaus) %>%
#   mutate(model = "TCDS_turntaking_log_gaus"),
# broom.mixed::tidy(tds.tt.gaus.v2) %>%
#   mutate(model = "TCDS_turntaking_log_gaus.v2")
)
# Aggregate to one point per child and then test a correlation with age
# (exclude clips with no TCDS; no way to compute proportion TCDS from kids
# for that clip if there's no TCDS!)
# random
propchitcds.rand <- quantity.rand.sa %>%
filter(SpkrAge == "Child" & !is.na(prop_sa.tds))
propchitcds.rand.corr_age <- propchitcds.rand %>%
group_by(aclew_child_id, tchiyr.std, age_mo_round) %>%
summarise(avg_prpchitcds = mean(prop_sa.tds)) %>%
mutate(Sample = "Random")
propchitcds.rand.corr_age.test <- cor.test(
~ age_mo_round + avg_prpchitcds,
data = propchitcds.rand.corr_age, method = "spearman")
# turn taking
propchitcds.tt <- quantity.nonrand.tt.sa %>%
filter(SpkrAge == "Child" & !is.na(prop_sa.tds))
propchitcds.tt.corr_age <- propchitcds.tt %>%
group_by(aclew_child_id, tchiyr.std, age_mo_round) %>%
summarise(avg_prpchitcds = mean(prop_sa.tds)) %>%
mutate(Sample = "Turn taking")
propchitcds.tt.corr_age.test <- cor.test(
~ age_mo_round + avg_prpchitcds,
data = propchitcds.tt.corr_age, method = "spearman")
propchitcds.corr_age.rand_and_tt <- bind_rows(
propchitcds.rand.corr_age, propchitcds.tt.corr_age)
propchitcds.plot.rand_and_tt <- ggplot(
propchitcds.corr_age.rand_and_tt,
aes(x = age_mo_round, y = avg_prpchitcds, lty = Sample)) +
geom_smooth(aes(fill = Sample, color = Sample), method = "lm") +
geom_point(aes(color = Sample)) +
ylab("Mean proportion C-TCDS") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(-1,1),
breaks=seq(-1,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1),xlim=c(0,38)) +
scale_color_manual(values = viridis(3)) +
scale_fill_manual(values = viridis(3)) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
# proportion of TCDS from adults
# random
propadutcds.rand <- quantity.rand.sa %>%
filter(SpkrAge == "Adult" & !is.na(prop_sa.tds)) %>%
group_by(aclew_child_id, tchiyr.std, age_mo_round) %>%
summarise(avg_prpadutcds = mean(prop_sa.tds))
# turn taking
propadutcds.tt <- quantity.nonrand.tt.sa %>%
filter(SpkrAge == "Adult" & !is.na(prop_sa.tds)) %>%
group_by(aclew_child_id, tchiyr.std, age_mo_round) %>%
summarise(avg_prpadutcds = mean(prop_sa.tds))
# Speech from MA vs. FA
# random
tds.per.seg.rand.age.sx <- all.data %>%
filter(sample == "random" & speaker != "CHI" &
grepl("xds@", tier) & val == "T" &
SpkrAge == "Adult" & SpkrSex != "Not known") %>%
group_by(aclew_child_id, SpkrSex, segment, segment_dur) %>%
summarise(tds_min.age.sx = round(sum(dur)/60000,3)) %>%
spread(SpkrSex, tds_min.age.sx) %>%
replace_na(list(Female = 0, Male = 0)) %>%
mutate(FA_percent = Female/(Female + Male)) %>%
group_by(aclew_child_id) %>%
summarize(
avg_FA_percent = mean(FA_percent),
tot_MA = sum(Male),
tot_FA = sum(Female),
tot_percent_FA = tot_FA/(tot_FA + tot_MA)
) %>%
left_join(ptcp.info)
# turn taking
tds.per.seg.tt.age.sx <- all.data %>%
filter(sample == "turn-taking" & speaker != "CHI" &
grepl("xds@", tier) & val == "T" &
SpkrAge == "Adult" & SpkrSex != "Not known") %>%
group_by(aclew_child_id, SpkrSex, segment, segment_dur) %>%
summarise(tds_min.age.sx = round(sum(dur)/60000,3)) %>%
spread(SpkrSex, tds_min.age.sx) %>%
replace_na(list(Female = 0, Male = 0)) %>%
mutate(FA_percent = Female/(Female + Male)) %>%
group_by(aclew_child_id) %>%
summarize(
avg_FA_percent = mean(FA_percent),
tot_MA = sum(Male),
tot_FA = sum(Female),
tot_percent_FA = tot_FA/(tot_FA + tot_MA)
) %>%
left_join(ptcp.info)
grid.arrange(tod.tcds.rand, tod.ods.rand,
tod.tcds.tt, tod.ods.tt, nrow=2, ncol=2)
## ODS random sample ####
ods.random.distribution <- ggplot(quantity.rand,
aes(round(ods_mph,0))) +
geom_histogram(binwidth = 2) +
ylab("# of clips") +
xlab ("ODS min/hr") +
basic.theme
ggsave(paste0(shiny.input.img.path, "ODS_random_distribution.png"),
plot = ods.random.distribution,
width = 8, height = 6, dpi = 300)
#sd(round(quantity.rand$ods_mph,0))^2
#mean(round(quantity.rand$ods_mph,0))
# mean is much smaller than variance
# not a huge inflated zero bin, so using nb
ods.rand.nb <- glmmTMB(round(ods_mph,0) ~
tchiyr.std +
stthr.tri +
hsz.std +
nsk.std +
tchiyr.std:stthr.tri +
tchiyr.std:nsk.std +
(1|aclew_child_id),
data=quantity.rand,
family="nbinom1")
#ods.rand.nb.res = simulateResiduals(ods.rand.nb)
#plot(ods.rand.nb.res, rank = T) # (manually saved)
#summary(ods.rand.nb)
# Data: quantity.rand
#
#      AIC      BIC   logLik deviance df.resid
#    763.7    791.2   -370.9    741.7       79
#
# Random effects:
#
# Conditional model:
#  Groups         Name        Variance       Std.Dev.
#  aclew_child_id (Intercept) 0.000000001982 0.00004452
# Number of obs: 90, groups:  aclew_child_id, 10
#
# Overdispersion parameter for nbinom1 family (): 9.14
#
# Conditional model:
#                               Estimate Std. Error z value Pr(>|z|)
# (Intercept)                    3.25730    0.13578  23.990 < 0.00002 ***
# tchiyr.std                    -0.57083    0.17424  -3.276 0.00105 **
# stthr.trimorning               0.19634    0.16469   1.192 0.23318
# stthr.triafternoon             0.25683    0.15264   1.683 0.09245 .
# hsz.std                       -0.01817    0.05623  -0.323 0.74660
# nsk.std                        0.49921    0.04959  10.067 < 0.00002 ***
# tchiyr.std:stthr.trimorning    0.65195    0.20165   3.233 0.00122 **
# tchiyr.std:stthr.triafternoon  0.28330    0.19815   1.430 0.15279
# tchiyr.std:nsk.std             0.04333    0.04987   0.869 0.38487
# save for reporting
ods.rand.nb.disp <- round(sigma(ods.rand.nb), 2)
ods.rand.nb.COEF.age <-
coef(summary(ods.rand.nb))[[1]]["tchiyr.std",]
ods.rand.nb.COEF.midd.morn <-
coef(summary(ods.rand.nb))[[1]]["stthr.trimorning",]
ods.rand.nb.COEF.midd.aft <-
coef(summary(ods.rand.nb))[[1]]["stthr.triafternoon",]
ods.rand.nb.COEF.nsk <-
coef(summary(ods.rand.nb))[[1]]["nsk.std",]
ods.rand.nb.COEF.age.midd.morn <-
coef(summary(ods.rand.nb))[[1]]["tchiyr.std:stthr.trimorning",]
ods.rand.nb.COEF.age.midd.aft <-
coef(summary(ods.rand.nb))[[1]]["tchiyr.std:stthr.triafternoon",]
# test the other two-way effects of time of day
ods.rand.nb.v2 <- glmmTMB(round(ods_mph,0) ~
tchiyr.std +
stthr.tri.a +
hsz.std +
nsk.std +
tchiyr.std:stthr.tri.a +
tchiyr.std:nsk.std +
(1|aclew_child_id),
data=quantity.rand,
family="nbinom1")
#ods.rand.nb.v2.res = simulateResiduals(ods.rand.nb.v2)
#summary(ods.rand.nb.v2)
# stthr.tri.amorning            -0.06049    0.12552   -0.48              0.62985
# tchiyr.std:stthr.tri.amorning  0.36865    0.14760    2.50              0.01250 *
# save for reporting
ods.rand.nb.v2.COEF.aft.morn <-
coef(summary(ods.rand.nb.v2))[[1]]["stthr.tri.amorning",]
ods.rand.nb.v2.COEF.age.aft.morn <-
coef(summary(ods.rand.nb.v2))[[1]]["tchiyr.std:stthr.tri.amorning",]
## ODS tt sample ####
ods.tt.distribution <- ggplot(quantity.nonrand.tt,
aes(round(ods_mph,0))) +
geom_histogram(binwidth = 2) +
ylab("# of clips") +
xlab ("ODS min/hr") +
basic.theme
ggsave(paste0(shiny.input.img.path, "ODS_turntaking_distribution.png"),
plot = ods.tt.distribution,
width = 8, height = 6, dpi = 300)
#sd(round(quantity.nonrand.tt$ods_mph,0))^2
#mean(round(quantity.nonrand.tt$ods_mph,0))
# mean is much smaller than variance
ods.tt.nb <- glmmTMB(round(ods_mph,0) ~
tchiyr.std +
stthr.tri +
hsz.std +
nsk.std +
tchiyr.std:stthr.tri +
tchiyr.std:nsk.std +
(1|aclew_child_id),
data=quantity.nonrand.tt,
family="nbinom1")
#ods.tt.nb.res = simulateResiduals(ods.tt.nb)
#plot(ods.tt.nb.res, rank = T) # (manually saved)
#summary(ods.tt.nb)
# Data: quantity.nonrand.tt
#
#      AIC      BIC   logLik deviance df.resid
#    427.2    449.3   -202.6    405.2       44
#
# Random effects:
#
# Conditional model:
#  Groups         Name        Variance Std.Dev.
#  aclew_child_id (Intercept) 0.0762   0.276
# Number of obs: 55, groups:  aclew_child_id, 10
#
# Overdispersion parameter for nbinom1 family (): 4.66
#
# Conditional model:
#                               Estimate Std. Error z value Pr(>|z|)
# (Intercept)                    2.61645    0.33147   7.893 0.0000294 ***
# tchiyr.std                    -0.04506    0.33390  -0.135 0.893
# stthr.trimorning               0.42969    0.34340   1.251 0.211
# stthr.triafternoon             0.34822    0.34745   1.002 0.316
# hsz.std                        0.03336    0.12176   0.274 0.784
# nsk.std                        0.55972    0.08283   6.757 0.00001405625 ***
# tchiyr.std:stthr.trimorning   -0.14627    0.33242  -0.440 0.660
# tchiyr.std:stthr.triafternoon  0.02957    0.35086   0.084 0.933
# tchiyr.std:nsk.std            -0.16430    0.10849  -1.514 0.130
# save for reporting
ods.tt.nb.disp <- round(sigma(ods.tt.nb), 2)
ods.tt.nb.COEF.age <-
coef(summary(ods.tt.nb))[[1]]["tchiyr.std",]
ods.tt.nb.COEF.nsk <-
coef(summary(ods.tt.nb))[[1]]["nsk.std",]
# test the other two-way effects of time of day
ods.tt.nb.v2 <- glmmTMB(round(ods_mph,0) ~
tchiyr.std +
stthr.tri.a +
hsz.std +
nsk.std +
tchiyr.std:stthr.tri.a +
tchiyr.std:nsk.std +
(1|aclew_child_id),
data=quantity.nonrand.tt,
family="nbinom1")
#summary(ods.tt.nb.v2)
# no additional results to report
# Write model results out for input to shiny
ODS.models <- bind_rows(
broom.mixed::tidy(ods.rand.nb) %>%
mutate(model = "ODS_random_nb"),
broom.mixed::tidy(ods.rand.nb.v2) %>%
mutate(model = "ODS_random_nb.v2"),
# broom.mixed::tidy(ods.rand.gaus) %>%
#   mutate(model = "ODS_random_log_gaus"),
# broom.mixed::tidy(ods.rand.gaus.v2) %>%
#   mutate(model = "ODS_random_log_gaus.v2"),
broom.mixed::tidy(ods.tt.nb) %>%
mutate(model = "ODS_turntaking_nb"),
broom.mixed::tidy(ods.tt.nb.v2) %>%
mutate(model = "ODS_turntaking_nb.v2")#,
# broom.mixed::tidy(ods.tt.gaus) %>%
#   mutate(model = "ODS_turntaking_log_gaus"),
# broom.mixed::tidy(ods.tt.gaus.v2) %>%
#   mutate(model = "ODS_turntaking_log_gaus.v2")
)
all.models <- bind_rows(TCDS.models, ODS.models)
write_csv(all.models, paste0(shiny.input.path, "all_model_tables.csv"))
# all vocalization types
chi.vm.lx.utts <- all.data %>%
filter(
(tier == "vcm@CHI" |
tier == "lex@CHI" |
tier == "mwu@CHI") &
!is.na(val)) %>%
mutate(voc.rating = case_when(
val == "M" ~ 4,
val == "1" | val == "W" ~ 3,
val == "C" ~ 2,
# since the intial Tseltal-CLE analysis, lex = '0' is
# no longer informative about babble type so it gets
# a minimum value (equal to non-canonical babble)
# this doesn't affect the current analysis since
# we take the maximum score for an utterance below
# so if it's N+0, it'll be 1, if it's C+0, it'll be 2
val == "0" | val == "N" ~ 1,
TRUE ~ 0 # includes crying, laughing, unsure
)) %>%
filter(voc.rating > 0) %>%
group_by(aclew_child_id, segment, sample, start) %>%
summarise(max_voc.rtg = max(voc.rating))
all.voc.types.per.child <- tibble(
aclew_child_id = rep(ptcp.info$aclew_child_id, 4),
max_voc.rtg = c(rep(1, length(ptcp.info$aclew_child_id)),
rep(2, length(ptcp.info$aclew_child_id)),
rep(3, length(ptcp.info$aclew_child_id)),
rep(4, length(ptcp.info$aclew_child_id)))
)
chi.nvocs <- chi.vm.lx.utts %>%
group_by(aclew_child_id) %>%
summarise(n_vocs = n())
chi.vm.lx.voc.type.props <- chi.vm.lx.utts %>%
group_by(aclew_child_id, max_voc.rtg) %>%
summarise(n_voc.type = n()) %>%
full_join(all.voc.types.per.child, by = c("aclew_child_id", "max_voc.rtg")) %>%
replace_na(list(n_voc.type = 0)) %>%
full_join(chi.nvocs, by = "aclew_child_id") %>%
mutate(prop_voc.type = round(n_voc.type/n_vocs, 3)) %>%
arrange(aclew_child_id, max_voc.rtg) %>%
full_join(ptcp.info, by = "aclew_child_id")
chi.vm.lx.voc.type.props <- chi.vm.lx.voc.type.props %>%
mutate(voc.type = factor(as.factor(max_voc.rtg),
labels = c("NCB", "CB", "SW", "MW")))
write_csv(chi.vm.lx.voc.type.props,
paste0(shiny.input.path,
"all_vocmat-types_proportions.csv"))
voc.mat.by.age <- ggplot(
data = chi.vm.lx.voc.type.props,
aes(x = age_mo_round, y = prop_voc.type, group = as.factor(voc.type))) +
geom_point(aes(color = as.factor(voc.type))) +
geom_smooth(aes(color = as.factor(voc.type),
fill = as.factor(voc.type)), method = "loess") +
ylab("Prop of linguistic vocs") + xlab("Child age (mo)") +
labs(fill='Voc type') +
labs(color='Voc type') +
scale_color_manual(values = c("gray80", "gray54",
"gray27", "black")) +
scale_fill_manual(values = c("gray80", "gray54",
"gray27", "black")) +
scale_y_continuous(limits=c(-0.5,1.5),
breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1), xlim=c(0,38)) +
theme_apa() + theme(
legend.position = c(0.9, 0.85),
legend.background = element_rect(fill="transparent"),
axis.line = element_line(color="black", size = 0.4))
voc.mat.by.age.1 <- ggplot(
data = subset(chi.vm.lx.voc.type.props, voc.type == "NCB"),
aes(x = age_mo_round, y = prop_voc.type)) +
geom_point(color = "red") +
geom_smooth(color = "red", fill = "red", method = "loess") +
ylab("Prop of linguistic vocs") + xlab("Child age (mo)") +
scale_y_continuous(limits=c(-0.5,1.5),
breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1), xlim=c(0,38)) +
theme_apa() +
basic.theme + theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color="black"),
axis.title.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.title.y = element_text(color="black"),
strip.text = element_text(color="black"),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color="black", size = 0.4),
legend.position = "none")
voc.mat.by.age.2 <- ggplot(
data = subset(chi.vm.lx.voc.type.props, voc.type == "CB"),
aes(x = age_mo_round, y = prop_voc.type)) +
geom_point(color = "orange") +
geom_smooth(color = "orange", fill = "orange", method = "loess") +
ylab("Prop of linguistic vocs") + xlab("Child age (mo)") +
scale_y_continuous(limits=c(-0.5,1.5),
breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1), xlim=c(0,38)) +
theme_apa() +
basic.theme + theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color="black"),
axis.title.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.title.y = element_text(color="black"),
strip.text = element_text(color="black"),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color="black", size = 0.4),
legend.position = "none")
voc.mat.by.age.3 <- ggplot(
data = subset(chi.vm.lx.voc.type.props, voc.type == "SW"),
aes(x = age_mo_round, y = prop_voc.type)) +
geom_point(color = "green") +
geom_smooth(color = "green", fill = "green", method = "loess") +
ylab("Prop of linguistic vocs") + xlab("Child age (mo)") +
scale_y_continuous(limits=c(-0.5,1.5),
breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1), xlim=c(0,38)) +
theme_apa() +
basic.theme + theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color="black"),
axis.title.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.title.y = element_text(color="black"),
strip.text = element_text(color="black"),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color="black", size = 0.4),
legend.position = "none")
voc.mat.by.age.4 <- ggplot(
data = subset(chi.vm.lx.voc.type.props, voc.type == "MW"),
aes(x = age_mo_round, y = prop_voc.type)) +
geom_point(color = "blue") +
geom_smooth(color = "blue", fill = "blue", method = "loess") +
ylab("Prop of linguistic vocs") + xlab("Child age (mo)") +
scale_y_continuous(limits=c(-0.5,1.5),
breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1), xlim=c(0,38)) +
theme_apa() +
basic.theme + theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color="black"),
axis.title.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.title.y = element_text(color="black"),
strip.text = element_text(color="black"),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color="black", size = 0.4),
legend.position = "none")
png(paste("diff_figs/","vocmat.1.png", sep=""),
width=600, height=400,units="px", bg = "transparent")
print(voc.mat.by.age.1)
dev.off()
png(paste("diff_figs/","vocmat.2.png", sep=""),
width=600, height=400,units="px", bg = "transparent")
print(voc.mat.by.age.2)
dev.off()
png(paste("diff_figs/","vocmat.3.png", sep=""),
width=600, height=400,units="px", bg = "transparent")
print(voc.mat.by.age.3)
dev.off()
png(paste("diff_figs/","vocmat.4.png", sep=""),
width=600, height=400,units="px", bg = "transparent")
print(voc.mat.by.age.4)
View(chi.vm.lx.voc.type.props.bin)
chi.vm.lx.voc.type.props
chi.vm.lx.voc.type.SLprops <- chi.vm.lx.voc.type.props %>%
mutate(speech.like = ifelse(max_voc.rtg < 2), 0, 1))
chi.vm.lx.voc.type.SLprops <- chi.vm.lx.voc.type.props %>%
mutate(speech.like = ifelse(max_voc.rtg < 2, 0, 1))
chi.vm.lx.voc.type.SLprops
chi.vm.lx.voc.type.SLprops <- chi.vm.lx.voc.type.props %>%
mutate(speech.like = ifelse(max_voc.rtg < 2, 0, 1)) %>%
group_by(aclew_child_id, speech.like) %>%
summarize(
n_voc.type.SL = sum(n_voc.type),
n_vocs = min(n_vocs)
) %>%
left_join(ptcp.info)
chi.vm.lx.voc.type.SLprops
chi.vm.lx.voc.type.SLprops %>%
group_by(aclew_child_id) %>%
chi.vm.lx.voc.type.SLprops %>%
filter(speech.like == 1) %>%
group_by(aclew_child_id, age_mo_round) %>%
summarize(SL.prop = n_voc.type.SL/n_vocs) %>%
arrange(age_mo_round)
round(subset(CBR.by.ptcp, age_mo_round == 9)$SL.prop,2)
CBR.by.ptcp <- chi.vm.lx.voc.type.SLprops %>%
filter(speech.like == 1) %>%
group_by(aclew_child_id, age_mo_round) %>%
summarize(SL.prop = n_voc.type.SL/n_vocs) %>%
arrange(age_mo_round)
round(subset(CBR.by.ptcp, age_mo_round == 9)$SL.prop,2)
round(mean(subset(CBR.by.ptcp, age_mo_round >= 9)$SL.prop))
round(median(subset(CBR.by.ptcp, age_mo_round >= 9)$SL.prop),2)
round(mean(subset(CBR.by.ptcp, age_mo_round >= 9)$SL.prop),2)
round(min(subset(CBR.by.ptcp, age_mo_round >= 9)$SL.prop),2)
round(max(subset(CBR.by.ptcp, age_mo_round >= 9)$SL.prop),2)
